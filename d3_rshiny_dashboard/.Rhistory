successful_tf_idf <-  successful_td %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
set.seed(2103)
wordcloud(successful_tf_idf$term, successful_tf_idf$tf_idf, min.freq = 1,
max.words=100, colors=brewer.pal(8, "Dark2"))
unsuccessful_projects_prep <- data.frame(doc_id = unsuccessful_projects$id, text = unsuccessful_projects$blurb, stringsAsFactors = F)
unsuccessful_projects_df_source <- DataframeSource(unsuccessful_projects_prep)
unsuccessful_corpus <- VCorpus(unsuccessful_projects_df_source)
# Corect issue
unsuccessful_corpus <- tm_map(unsuccessful_corpus,
content_transformer(function(x) iconv(x, to='UTF-8-MAC', sub='byte')))
# clean unsuccess corpa
unsuccessful_clean <- clean_corpus(unsuccessful_corpus)
corpus_combine <-tm:::c.VCorpus(successful_clean, unsuccessful_clean)
corpus_combine_dtm <- DocumentTermMatrix(corpus_combine)
corpus_combine_dt <- tidy(corpus_combine_dtm)
# add label "success" "unsuccess"
corpus_combine_dt$type <- ifelse(corpus_combine_dt$document %in% successful_td$document, 'Success', 'Unsuccess')
# select top20 words
corpus_combine_count <- corpus_combine_dt %>%
group_by(term) %>%
summarize(total_word = sum(count)) %>%
arrange(desc(total_word)) %>%
head(20)
# join count with labels
corpus_combine_pyramid <- left_join(corpus_combine_dt, corpus_combine_count, by='term')%>%
filter(!is.na(total_word)) %>%
group_by(type) %>%
mutate(count_forplot = ifelse( type == 'Unsuccess', count*-1, count))
ggplot(corpus_combine_pyramid, aes(x = reorder(term, total_word),
y = count_forplot, fill = type)) +
geom_bar(data = filter(corpus_combine_pyramid, type == "Success"), stat = "identity") +
geom_bar(data = filter(corpus_combine_pyramid, type == "Unsuccess"), stat = "identity") +
coord_flip() +
scale_y_continuous(breaks = seq(-100,100,25)) +
theme_solarized() +
scale_color_solarized(accent = 'yellow') +
labs(
x = 'Top 20 Words',
y= 'Count',
title = 'Top 20 Words in Successful & Unsuccessful Campaign',
caption = "\nSource: https://webrobots.io/kickstarter-datasets/"
)+  theme(legend.title = element_blank(),
legend.position = "top",
panel.grid.major.x = element_blank(),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"))
corpus_combine_convert <- corpus(corpus_combine)
FRE_combine <- textstat_readability(corpus_combine_convert,
measure=c('Flesch.Kincaid'))
# add backer count
FRE_combine$backers_count[1:1000] = successful_projects$backers_count
FRE_combine$backers_count[1001:2000] = unsuccessful_projects$backers_count
FRE_combine$cat[1:1000] = successful_projects$top_category
FRE_combine$cat[1001:2000] = unsuccessful_projects$top_category
FRE_combine$blurb[1:1000] = successful_projects$blurb
FRE_combine$blurb[1001:2000] = unsuccessful_projects$blurb
FRE_combine$state[1:1000] = "successful"
FRE_combine$state[1001:2000] = "unsuccessful"
corpus_combine_convert <- corpus(corpus_combine)
FRE_combine <- textstat_readability(corpus_combine_convert,
measure=c('Flesch.Kincaid'))
# add backer count
FRE_combine$backers_count[1:1000] = successful_projects$backers_count
FRE_combine$backers_count[1001:2000] = unsuccessful_projects$backers_count
FRE_combine$cat[1:1000] = successful_projects$top_category
FRE_combine$cat[1001:2000] = unsuccessful_projects$top_category
FRE_combine$blurb[1:1000] = successful_projects$blurb
FRE_combine$blurb[1001:2000] = unsuccessful_projects$blurb
FRE_combine$state[1:1000] = "successful"
FRE_combine$state[1001:2000] = "unsuccessful"
colors <- c('#4AC6B7', '#1972A4', '#965F8A', '#FF7070', '#C61951')
fig <- plot_ly(FRE_combine, x = ~backers_count, y = ~Flesch.Kincaid, color = ~cat,  colors = colors,
type = 'scatter', size = ~backers_count,
mode = 'markers', sizes = c(5,100),
marker = list(symbol = 'circle', sizemode = 'diameter',
opacity = 0.5),
text = ~paste('FK:', Flesch.Kincaid, '<br>Backer:', backers_count, '<br>Category:', cat))
fig <- fig %>% layout(title = 'Relationship Between Backer Count and Flesh Kincaid Readability',
xaxis = list(title = 'Backer Count',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 10000),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Flesh Kincaid Readability',
gridcolor = 'rgb(255, 255, 255)',
range = c(0,30),
zerolinewidth = 1,
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)')
fig
sentiment_corpus_bing <- inner_join(tidy_sentiment, sentiment_corpus, by = "document")
sentiment_corpus <- as.data.frame(FRE_combine)
tidy_sentiment_corpus<- sentiment_corpus %>%
unnest_tokens("word", blurb)
tidy_sentiment <- tidy_sentiment_corpus %>%
inner_join(get_sentiments("bing")) %>%
count(document, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
head(tidy_sentiment)
tidy_sentiment <- tidy_sentiment_corpus %>%
inner_join(get_sentiments("bing")) %>%
count(document, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
head(tidy_sentiment)
sentiment_corpus_bing <- inner_join(tidy_sentiment, sentiment_corpus, by = "document")
ggplot(data = sentiment_corpus_bing, aes(x = sentiment, y = backers_count, color = state)) +
geom_jitter() +
xlim(-3.5, 4.5) +
theme_solarized() +
scale_color_solarized(accent = 'yellow') +
theme(legend.position = "none", panel.grid.major.x = element_blank()) +
scale_y_continuous( limits = c(0, 10000)) +
labs(
x = 'Bing Positivity Score',
y= 'Backer Count',
title = 'Campaign Success by Positivity Score ',
subtitle = "\n Slightly positive campaigns are more popular\n",
caption = "\nSource: https://webrobots.io/kickstarter-datasets/"
) + theme(panel.grid.major.x = element_blank(),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"))
knitr::opts_chunk$set(echo = TRUE)
library(reshape2)
library(dplyr)
library(tm)
library(tidytext)
library(wordcloud)
library(plotly)
library(tidyr)
library(tidytext)
library(ggthemes)
library(ggplot2)
library(quanteda)
library(quanteda.textstats)
library(textdata)
data = read.csv("kickstarter_projects_2021-05.csv")
by_backers <- data %>%
group_by(top_category) %>%
summarise(backers_cnt = round(mean(backers_count),1))
ggplot(data=by_backers, aes(x = top_category, y = backers_cnt)) +
geom_bar(stat = "identity", fill = "#E69F00",width=0.7)+
theme_solarized() +
scale_color_solarized(accent = 'yellow') +
labs(
x = 'Category',
y= 'Backer Count',
title = 'Campaign Success (Average Backers Count) by Category',
subtitle = "\n Game is the most successful category\n",
caption = "\nSource: https://webrobots.io/kickstarter-datasets/"
)+
theme(axis.text.x=element_text(angle = -90),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"))
by_pledged <- data %>%
group_by(top_category) %>%
summarise(pledged_amt = round(mean(converted_pledged_amount),1))
ggplot(data=by_pledged, aes(x = top_category, y = pledged_amt)) +
geom_bar(stat = "identity", fill = "#69b3a2",width=0.7)+
theme_solarized() +
scale_color_solarized(accent = 'yellow') +
labs(
x = 'Category',
y= 'Backer Count',
title = 'Campaign Success (Average Backers Count) by Category',
subtitle = "\n Technology is the most successful category\n",
caption = "\nSource: https://webrobots.io/kickstarter-datasets/"
)+
theme(axis.text.x=element_text(angle = -90),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"))
successful_projects <- head(data[order(-data$converted_pledged_amount),],1000)
unsuccessful_projects <- head(data[order(data$converted_pledged_amount),],1000)
successful_projects_prep <- data.frame(doc_id = successful_projects$id, text = successful_projects$blurb, stringsAsFactors = F)
successful_projects_df_source <- DataframeSource(successful_projects_prep)
successful_corpus <- VCorpus(successful_projects_df_source)
# remove all special character
removeNumPunct <- function(x){gsub("[^[:alnum:][:space:]]", "", x)}
# remove fully capitalized words
removeAllCapital <- function(x){gsub("[A-Z]{2,}","",x)}
clean_corpus <- function(corpus){
# remove punctuation
corpus <- tm_map(corpus, content_transformer(removeAllCapital))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, content_transformer(removeNumPunct))
# lower case
corpus <- tm_map(corpus, content_transformer(tolower))
# stop word
corpus <- tm_map(corpus, removeWords, c(stopwords("en")))
# remove numbers
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stripWhitespace)
return(corpus)
}
# Correct issue
successful_corpus <- tm_map(successful_corpus,
content_transformer(function(x) iconv(x, to='UTF-8-MAC', sub='byte')))
successful_clean <- clean_corpus(successful_corpus)
successful_dtm <- DocumentTermMatrix(successful_clean)
successful_tdm <- TermDocumentMatrix(successful_clean)
successful_m <- as.matrix(successful_tdm)
# Print the dimensions of sotu_m
dim(successful_m)
successful_td <- tidy(successful_tdm)
successful_tf_idf <-  successful_td %>%
bind_tf_idf(term, document, count) %>%
arrange(desc(tf_idf))
set.seed(2103)
wordcloud(successful_tf_idf$term, successful_tf_idf$tf_idf, min.freq = 1,
max.words=100, colors=brewer.pal(8, "Dark2"))
unsuccessful_projects_prep <- data.frame(doc_id = unsuccessful_projects$id, text = unsuccessful_projects$blurb, stringsAsFactors = F)
unsuccessful_projects_df_source <- DataframeSource(unsuccessful_projects_prep)
unsuccessful_corpus <- VCorpus(unsuccessful_projects_df_source)
# Corect issue
unsuccessful_corpus <- tm_map(unsuccessful_corpus,
content_transformer(function(x) iconv(x, to='UTF-8-MAC', sub='byte')))
# clean unsuccess corpa
unsuccessful_clean <- clean_corpus(unsuccessful_corpus)
corpus_combine <-tm:::c.VCorpus(successful_clean, unsuccessful_clean)
corpus_combine_dtm <- DocumentTermMatrix(corpus_combine)
corpus_combine_dt <- tidy(corpus_combine_dtm)
# add label "success" "unsuccess"
corpus_combine_dt$type <- ifelse(corpus_combine_dt$document %in% successful_td$document, 'Success', 'Unsuccess')
# select top20 words
corpus_combine_count <- corpus_combine_dt %>%
group_by(term) %>%
summarize(total_word = sum(count)) %>%
arrange(desc(total_word)) %>%
head(20)
# join count with labels
corpus_combine_pyramid <- left_join(corpus_combine_dt, corpus_combine_count, by='term')%>%
filter(!is.na(total_word)) %>%
group_by(type) %>%
mutate(count_forplot = ifelse( type == 'Unsuccess', count*-1, count))
ggplot(corpus_combine_pyramid, aes(x = reorder(term, total_word),
y = count_forplot, fill = type)) +
geom_bar(data = filter(corpus_combine_pyramid, type == "Success"), stat = "identity") +
geom_bar(data = filter(corpus_combine_pyramid, type == "Unsuccess"), stat = "identity") +
coord_flip() +
scale_y_continuous(breaks = seq(-100,100,25)) +
theme_solarized() +
scale_color_solarized(accent = 'yellow') +
labs(
x = 'Top 20 Words',
y= 'Count',
title = 'Top 20 Words in Successful & Unsuccessful Campaign',
caption = "\nSource: https://webrobots.io/kickstarter-datasets/"
)+  theme(legend.title = element_blank(),
legend.position = "top",
panel.grid.major.x = element_blank(),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"))
corpus_combine_convert <- corpus(corpus_combine)
FRE_combine <- textstat_readability(corpus_combine_convert,
measure=c('Flesch.Kincaid'))
# add backer count
FRE_combine$backers_count[1:1000] = successful_projects$backers_count
FRE_combine$backers_count[1001:2000] = unsuccessful_projects$backers_count
FRE_combine$cat[1:1000] = successful_projects$top_category
FRE_combine$cat[1001:2000] = unsuccessful_projects$top_category
FRE_combine$blurb[1:1000] = successful_projects$blurb
FRE_combine$blurb[1001:2000] = unsuccessful_projects$blurb
FRE_combine$state[1:1000] = "successful"
FRE_combine$state[1001:2000] = "unsuccessful"
colors <- c('#4AC6B7', '#1972A4', '#965F8A', '#FF7070', '#C61951')
fig <- plot_ly(FRE_combine, x = ~backers_count, y = ~Flesch.Kincaid, color = ~cat,  colors = colors,
type = 'scatter', size = ~backers_count,
mode = 'markers', sizes = c(5,100),
marker = list(symbol = 'circle', sizemode = 'diameter',
opacity = 0.5),
text = ~paste('FK:', Flesch.Kincaid, '<br>Backer:', backers_count, '<br>Category:', cat))
fig <- fig %>% layout(title = 'Relationship Between Backer Count and Flesh Kincaid Readability',
xaxis = list(title = 'Backer Count',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 10000),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Flesh Kincaid Readability',
gridcolor = 'rgb(255, 255, 255)',
range = c(0,30),
zerolinewidth = 1,
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)')
fig
sentiment_corpus <- as.data.frame(FRE_combine)
tidy_sentiment_corpus<- sentiment_corpus %>%
unnest_tokens("word", blurb)
tidy_sentiment <- tidy_sentiment_corpus %>%
inner_join(get_sentiments("bing")) %>%
count(document, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
head(tidy_sentiment)
sentiment_corpus_bing <- inner_join(tidy_sentiment, sentiment_corpus, by = "document")
ggplot(data = sentiment_corpus_bing, aes(x = sentiment, y = backers_count, color = state)) +
geom_jitter() +
xlim(-3.5, 4.5) +
theme_solarized() +
scale_color_solarized(accent = 'yellow') +
theme(legend.position = "none", panel.grid.major.x = element_blank()) +
scale_y_continuous( limits = c(0, 10000)) +
labs(
x = 'Bing Positivity Score',
y= 'Backer Count',
title = 'Campaign Success by Positivity Score ',
subtitle = "\n Slightly positive campaigns are more popular\n",
caption = "\nSource: https://webrobots.io/kickstarter-datasets/"
) + theme(panel.grid.major.x = element_blank(),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"))
sentiment_corpus_bing_negpos <- sentiment_corpus_bing %>%
mutate(sentiment_case = case_when(
sentiment >= 1 ~ "positive",
sentiment <= -1 ~ "negative"))
sentiment_pos <- sentiment_corpus_bing_negpos %>%
filter(sentiment_case == "positive") %>%
select(document)
sentiment_neg <- sentiment_corpus_bing_negpos %>%
filter(sentiment_case == "negative") %>%
select(document)
sent_pos <- inner_join(sentiment_pos, sentiment_corpus, key = document)
sent_neg <- inner_join(sentiment_neg, sentiment_corpus, key = document)
# Create positive corpora
sent_pos_prep <- data.frame(doc_id = "Positive", text = sent_pos$blurb, stringsAsFactors = F)
sent_ds_pos <- DataframeSource(sent_pos_prep)
sent_corpus_pos <- VCorpus(sent_ds_pos)
sent_corpus_pos_clean <- clean_corpus(sent_corpus_pos)
# Create negative corpora
sent_neg_prep <- data.frame(doc_id = "Negative", text = sent_neg$blurb, stringsAsFactors = F)
sent_ds_neg <- DataframeSource(sent_neg_prep)
sent_corpus_neg <- VCorpus(sent_ds_neg)
sent_corpus_neg_clean <- clean_corpus(sent_corpus_neg)
# Combine both
polarity_corpus = tm:::c.VCorpus(sent_corpus_pos_clean,sent_corpus_neg_clean)
polarity_dtm = DocumentTermMatrix(polarity_corpus)
polarity_tdm <- TermDocumentMatrix(polarity_corpus)
#transform in tidy format
all_m = as.matrix(polarity_dtm)
polarity_td <- tidy(polarity_dtm)
set.seed(2103)
polarity_td %>%
group_by(document) %>%
acast(term ~ document, fill=0) %>% #fill=0 value to apply to structural missing values#
comparison.cloud(color= c("#F44336", "#2196f3"), scale = c(0.5, 2), max.words = 150)
tidy_sentiment_corpus %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(max.words = 150)
nrc_dict <- get_sentiments("nrc") %>%
filter(sentiment %in% c("anger", "anticipation", "disgust", "fear","joy","sadness","surprise","trust"))
nrc_sentiment <- tidy_sentiment_corpus %>%
inner_join(nrc_dict) %>%
count(document, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sent_score = anger + anticipation + disgust + fear + joy + sadness + surprise + trust)
head(nrc_sentiment)
sentiment_corpus_nrc <- inner_join(nrc_sentiment, sentiment_corpus, by = "document")
ggplot(data = sentiment_corpus_nrc, aes(x = anticipation, y = backers_count, color = state)) +
geom_jitter() +
xlim(-0.5, 4) +
theme_solarized() +
scale_color_solarized(accent = 'yellow') +
theme(legend.position = "none", panel.grid.major.x = element_blank(),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold")) +
scale_y_continuous( limits = c(0, 10000)) +
labs(
x = 'NRC Anticipation Score',
y= 'Backer Count',
title = 'Campaign Success by Anticipation Score ',
caption = "\nSource: https://webrobots.io/kickstarter-datasets/"
)
ggplot(data = sentiment_corpus_nrc, aes(x =joy, y = backers_count, color = state)) +
geom_jitter() +
xlim(-0.5, 6) +
theme_solarized() +
scale_color_solarized(accent = 'yellow') +
theme(legend.position = "none", panel.grid.major.x = element_blank(),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold")) +
scale_y_continuous( limits = c(0, 10000)) +
labs(
x = 'NRC Joy Score',
y= 'Backer Count',
title = 'Campaign Success by Joy Score ',
caption = "\nSource: https://webrobots.io/kickstarter-datasets/"
)+ theme(panel.grid.major.x = element_blank(),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"))
ggplot(data = sentiment_corpus_nrc, aes(x = surprise, y = backers_count, color = state)) +
geom_jitter() +
xlim(-0.5, 4) +
theme_solarized() +
scale_color_solarized(accent = 'yellow') +
theme(legend.position = "none", panel.grid.major.x = element_blank(),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold")) +
scale_y_continuous( limits = c(0, 10000)) +
labs(
x = 'NRC Surprise Score',
y= 'Backer Count',
title = 'Campaign Success by Surprise Score ',
caption = "\nSource: https://webrobots.io/kickstarter-datasets/"
)
ggplot(data = sentiment_corpus_nrc, aes(x =trust, y = backers_count, color = state)) +
geom_jitter() +
xlim(-0.5, 5) +
theme_solarized() +
scale_color_solarized(accent = 'yellow') +
theme(legend.position = "none", panel.grid.major.x = element_blank()) +
scale_y_continuous( limits = c(0, 10000)) +
labs(
x = 'NRC Trust Score',
y= 'Backer Count',
title = 'Campaign Success by Trust Score ',
caption = "\nSource: https://webrobots.io/kickstarter-datasets/"
)+ theme(panel.grid.major.x = element_blank(),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"))
ggplot(data = sentiment_corpus_nrc, aes(x = sent_score, color = state)) +
geom_density(size = .75) +
xlim(0,20) +
theme_solarized() +
scale_color_solarized(accent = 'yellow') +
theme(legend.title = element_blank(), legend.position = "top",
panel.grid.major.x = element_blank(),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold")) +
xlab("\nNRC total sentiment score") +
ylab("Density\n") +
labs(title = "Successful vs. failed campaigns by all emotions",
caption = "Source: webrobots.io")
ggplot(data = sentiment_corpus_nrc, aes(x = disgust, y = backers_count, color = state)) +
geom_jitter() +
xlim(-0.5, 5) +
theme_solarized() +
scale_color_solarized(accent = 'yellow') +
theme(legend.position = "none", panel.grid.major.x = element_blank()) +
scale_y_continuous( limits = c(0, 10000)) +
labs(
x = 'NRC Disgust Score',
y= 'Backer Count',
title = 'Campaign Success by Disgust Score ',
caption = "\nSource: https://webrobots.io/kickstarter-datasets/"
)+ theme(panel.grid.major.x = element_blank(),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"))
ggplot(data = sentiment_corpus_nrc, aes(x = disgust, y = backers_count, color = state)) +
geom_jitter() +
xlim(-0.5, 5) +
theme_solarized() +
scale_color_solarized(accent = 'yellow') +
theme(legend.position = "none", panel.grid.major.x = element_blank()) +
scale_y_continuous( limits = c(0, 10000)) +
labs(
x = 'NRC Disgust Score',
y= 'Backer Count',
title = 'Campaign Success by Disgust Score ',
caption = "\nSource: https://webrobots.io/kickstarter-datasets/"
)+ theme(panel.grid.major.x = element_blank(),
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"))
shiny::runApp('Desktop/dashboard')
install.packages("semantic.dashboard")
shiny::runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp()
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp()
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
runApp('Documents/NISS/BeautifulBars/d3_rshiny_dashboard')
setwd("~/Documents/NISS/BeautifulBars/d3_rshiny_dashboard")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
